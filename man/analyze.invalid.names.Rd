% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyzeInvalidNames.R
\name{analyze.invalid.names}
\alias{analyze.invalid.names}
\title{Finding Invalid Names}
\usage{
analyze.invalid.names(var = NA)
}
\arguments{
\item{var}{Optional. Variable name(s) to be queried. If not NA, the results will
be filtered to show only those with the given variable name.}
}
\value{
A list of data frames for each variable with an invalid name.
}
\description{
Returns a data frame for each variable in the execution containing the 
instances where the variable name is invalid (c, t, T, F).
Each data frame contains the following columns:
\itemize{
	\item value: The value of the variable.
	\item container: The type of the container of the variable.
	\item dimension: The size of the container.
	\item type: The data type(s) contained within the container.
	\item code: The line of code associated with the variable.
	\item scriptNum: The script number associated with the variable.
	\item startLine: The line number associated with the variable.
}
}
\details{
analyze.invalid.names belongs to provAnalyzeR, an analyzer which utilises provenance 
collected during-execution to perform dynamic analysis and identify coding anomalies.

This function may be used independently after the analyzer has been initialised using
one of its initialisation functions (listed below). Alternatively, it is run by the prov.analyze
functions in order to summarize analysis.
}
\examples{
\dontrun{
prov.analyze.run("test.R")
analyze.invalid.names()
}

}
\seealso{
provAnalyzeR Initialisation Functions:

\code{\link{prov.analyze}}

\code{\link{prov.analyze.file}}

\code{\link{prov.analyze.run}}
}
