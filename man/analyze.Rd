% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/provAnalyzeR.R
\name{prov.analyze}
\alias{prov.analyze}
\alias{prov.analyze.file}
\alias{prov.analyze.run}
\title{Provenance analysis functions}
\usage{
prov.analyze(
  save = FALSE,
  create.zip = FALSE,
  type.changes = TRUE,
  elapsed.time = TRUE,
  invalid.names = TRUE,
  function.reassignments = TRUE,
  preexisting.vars = TRUE,
  lintr = TRUE
)

prov.analyze.file(
  prov.file,
  save = FALSE,
  create.zip = FALSE,
  type.changes = TRUE,
  elapsed.time = TRUE,
  invalid.names = TRUE,
  function.reassignments = TRUE,
  preexisting.vars = TRUE,
  lintr = TRUE
)

prov.analyze.run(
  r.script,
  save = FALSE,
  create.zip = FALSE,
  type.changes = TRUE,
  elapsed.time = TRUE,
  invalid.names = TRUE,
  function.reassignments = TRUE,
  preexisting.vars = TRUE,
  lintr = TRUE,
  ...
)
}
\arguments{
\item{save}{if true, saves the analysis to the file prov-analyze.txt in the
provenance directory}

\item{create.zip}{if true, all of the provenance data will be packaged up
into a zip file stored in the current working directory.}

\item{type.changes}{if true, analysis of any type changes will be printed.}

\item{elapsed.time}{if true, line by line graph of execution time will be 
displayed.}

\item{invalid.names}{if true, any variable names that overwrite common base R 
values will be printed. Currently, these are: c, t, T, F.}

\item{function.reassignments}{if true, any location where a function name
is reused will be printed.}

\item{preexisting.vars}{if true, any variables that were set outside of the
script will be printed.}

\item{lintr}{if true, relevant lintr analysis will be performed and 
displayed.}

\item{prov.file}{the path to the file containing provenance}

\item{r.script}{the name of a file containing an R script}

\item{...}{extra parameters are passed to the provenance collector.  See rdt's prov.run function
or rdtLites's prov.run function for details.}
}
\description{
prov.analyze examines the provenance from the last execution of prov.run 
and outputs a text summary of any coding anomalies to the console. If RStudio 
is used, some output is also displayed in the markers pane.

prov.analyze.file reads a JSON file that contains provenance and outputs
a text summary of any coding anomalies to the console. If RStudio is used, 
some output is also displayed in the markers pane.

prov.analyze.run executes a script, collects provenance, and outputs a
text summary of any coding anomalies to the console. If RStudio is used, 
some output is also displayed in the markers pane.
}
\details{
These functions use provenance collected using the rdtLite or rdt packages.

For provenance collected from executing a script file, the analysis identifies:
\itemize{
  \item The name of the script file executed
  \item The names of any variables used but not set in the current session
  \item Any variables assigned to c, t, T, or F (values used by R)
  \item Any variable type changes that occurred
  \item Any functions that were defined multiple times
  \item The execution time recorded by provenance for each line of the script
  \item Basic static analysis information collected by the lintr package 
}

Creating a zip file depends on a zip executable being on the search path.
By default, it looks for a program named zip.  To use a program with
a different name, set the value of the R_ZIPCMD environment variable.  This
code has been tested with Unix zip and with 7-zip on Windows.
}
\examples{
\dontrun{prov.analyze ()}

\dontrun{
testdata <- system.file("testdata", "prov.json", package = "provAnalyzeR")
prov.analyze.file(testdata)}

\dontrun{
testdata <- system.file("testscripts", "console.R", package = "provAnalzeR")
prov.analyze.run (testdata)}

}
